buildscript {
  repositories {
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "me.champeau.gradle:jmh-gradle-plugin:0.5.0"
  }
}

apply plugin: "me.champeau.gradle.jmh"
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'

sourceCompatibility = 13

group = 'tsypanov'
version = '1.0-SNAPSHOT'

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

repositories {
  mavenLocal()
  mavenCentral()
}

ext {
  jmhVersion = "1.23"
  jupiterVersion = "5.3.2"
}

sourceSets {
  generated {
    java {
      srcDir "$projectDir/jmh/generated"
    }
  }
}

//compileJava {
//  options.compilerArgs += ["-XDstringConcat=inline"]
//}

dependencies {
  implementation "org.openjdk.jmh:jmh-core:${jmhVersion}"
  implementation "org.apache.commons:commons-lang3:3.8.1"
  compileOnly "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"
  annotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"

  testImplementation "org.junit.jupiter:junit-jupiter-api:${jupiterVersion}"
  testImplementation "org.junit.jupiter:junit-jupiter-params:${jupiterVersion}"
}

//tasks.withType(JavaCompile) {
//  println 'Compiler args: ' + options.compilerArgs.toString();
//}

ext.moduleName = 'strings-jmh-examples'

compileJava {
  inputs.property('moduleName', moduleName)
  doFirst {
    options.compilerArgs = [
            '--module-path', classpath.asPath
    ]
    classpath = files()
  }
}

mainClassName = 'tsypanov.strings.benchmark.BenchmarkRunner'
